name: release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
      with:
        fetch-depth: 2
    - uses: actions/setup-dotnet@main
    - name: check current version
      run: echo "OLD_VERSION=$(sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' $(find . -name *.csproj | grep --invert-match Test))" >> $GITHUB_ENV
    - id: dotnet-bump-version
      uses: greg-chuchro/dotnet-bump-version@dev
    - name: check bumped version
      run: echo "NEW_VERSION=$(sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' $(find . -name *.csproj | grep --invert-match Test))" >> $GITHUB_ENV
    - name: 'amend last commit'
      run: |
        git config --global user.name "dotnet-version-bump"
        git config --global user.email ""
        LAST_COMMIT_MESSAGE=$(git show -s --format=%s)
        MESSAGE=$LAST_COMMIT_MESSAGE$'\n\n'$(echo "${{steps.dotnet-bump-version.outputs.version-info}}")
        git commit --amend -m "$MESSAGE"
        git push --force
    - name: 'tag'
      if: ${{env.NEW_VERSION != env.OLD_VERSION}}
      run: |
        git tag v${{env.NEW_VERSION}}
        git push origin v${{env.NEW_VERSION}}
    - name: push to nuget
      if: ${{env.NEW_VERSION != env.OLD_VERSION}}
      run: |
        NUPKG=$(dotnet pack $(find . -name *.csproj | grep --invert-match Test) --configuration Release | sed -n 's/.*\s[^/]*\(\/.*nupkg\).*/\1/p')
        dotnet nuget push $NUPKG --source https://www.nuget.org --api-key ${{secrets.NUGET_API_KEY}}
